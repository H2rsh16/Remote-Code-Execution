{"ast":null,"code":"var _jsxFileName = \"D:\\\\remote-execution-system\\\\src\\\\pages\\\\AuthContex.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// AuthContext.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(() => {\n    // Check local storage for authentication status on initial load\n    return localStorage.getItem('isAuthenticated') === 'true';\n  });\n  const login = rememberMe => {\n    setIsAuthenticated(true);\n    localStorage.setItem('isAuthenticated', 'true'); // Persist authentication status\n\n    // If remember me is checked, store username/password\n    if (rememberMe) {\n      localStorage.setItem('username', username); // Store username (ensure this is defined)\n      localStorage.setItem('password', password); // Store password (consider security implications)\n    } else {\n      localStorage.removeItem('username');\n      localStorage.removeItem('password');\n    }\n  };\n  const logout = () => {\n    setIsAuthenticated(false);\n    localStorage.removeItem('isAuthenticated'); // Remove authentication status\n    localStorage.removeItem('username'); // Clear stored username\n    localStorage.removeItem('password'); // Clear stored password\n  };\n\n  // Load saved credentials if they exist\n  useEffect(() => {\n    const savedUsername = localStorage.getItem('username');\n    const savedPassword = localStorage.getItem('password');\n    if (savedUsername && savedPassword) {\n      // Optionally handle loading saved credentials here\n      // e.g., set username and password in the login form state if needed\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"BoMoydLWteQClrmw+uX3nY2dY44=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","localStorage","getItem","login","rememberMe","setItem","username","password","removeItem","logout","savedUsername","savedPassword","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["D:/remote-execution-system/src/pages/AuthContex.jsx"],"sourcesContent":["// AuthContext.js\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [isAuthenticated, setIsAuthenticated] = useState(() => {\r\n        // Check local storage for authentication status on initial load\r\n        return localStorage.getItem('isAuthenticated') === 'true';\r\n    });\r\n\r\n    const login = (rememberMe) => {\r\n        setIsAuthenticated(true);\r\n        localStorage.setItem('isAuthenticated', 'true'); // Persist authentication status\r\n\r\n        // If remember me is checked, store username/password\r\n        if (rememberMe) {\r\n            localStorage.setItem('username', username); // Store username (ensure this is defined)\r\n            localStorage.setItem('password', password); // Store password (consider security implications)\r\n        } else {\r\n            localStorage.removeItem('username');\r\n            localStorage.removeItem('password');\r\n        }\r\n    };\r\n\r\n    const logout = () => {\r\n        setIsAuthenticated(false);\r\n        localStorage.removeItem('isAuthenticated'); // Remove authentication status\r\n        localStorage.removeItem('username'); // Clear stored username\r\n        localStorage.removeItem('password'); // Clear stored password\r\n    };\r\n\r\n    // Load saved credentials if they exist\r\n    useEffect(() => {\r\n        const savedUsername = localStorage.getItem('username');\r\n        const savedPassword = localStorage.getItem('password');\r\n        if (savedUsername && savedPassword) {\r\n            // Optionally handle loading saved credentials here\r\n            // e.g., set username and password in the login form state if needed\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ isAuthenticated, login, logout }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,MAAM;IACzD;IACA,OAAOU,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,KAAK,MAAM;EAC7D,CAAC,CAAC;EAEF,MAAMC,KAAK,GAAIC,UAAU,IAAK;IAC1BJ,kBAAkB,CAAC,IAAI,CAAC;IACxBC,YAAY,CAACI,OAAO,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC,CAAC;;IAEjD;IACA,IAAID,UAAU,EAAE;MACZH,YAAY,CAACI,OAAO,CAAC,UAAU,EAAEC,QAAQ,CAAC,CAAC,CAAC;MAC5CL,YAAY,CAACI,OAAO,CAAC,UAAU,EAAEE,QAAQ,CAAC,CAAC,CAAC;IAChD,CAAC,MAAM;MACHN,YAAY,CAACO,UAAU,CAAC,UAAU,CAAC;MACnCP,YAAY,CAACO,UAAU,CAAC,UAAU,CAAC;IACvC;EACJ,CAAC;EAED,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACjBT,kBAAkB,CAAC,KAAK,CAAC;IACzBC,YAAY,CAACO,UAAU,CAAC,iBAAiB,CAAC,CAAC,CAAC;IAC5CP,YAAY,CAACO,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;IACrCP,YAAY,CAACO,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;EACzC,CAAC;;EAED;EACAhB,SAAS,CAAC,MAAM;IACZ,MAAMkB,aAAa,GAAGT,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACtD,MAAMS,aAAa,GAAGV,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACtD,IAAIQ,aAAa,IAAIC,aAAa,EAAE;MAChC;MACA;IAAA;EAER,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIjB,OAAA,CAACC,WAAW,CAACiB,QAAQ;IAACC,KAAK,EAAE;MAAEd,eAAe;MAAEI,KAAK;MAAEM;IAAO,CAAE;IAAAZ,QAAA,EAC3DA;EAAQ;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAACnB,EAAA,CA1CWF,YAAY;AAAAsB,EAAA,GAAZtB,YAAY;AA4CzB,OAAO,MAAMuB,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAM9B,UAAU,CAACK,WAAW,CAAC;AAAA;AAACyB,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}